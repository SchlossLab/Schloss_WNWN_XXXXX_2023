import re

norarefy_slugs = [ 
    "norarefy-source/dispersion-survey/dispersion",
    "norarefy-source/minimal-rarefy-example/minimal-rarefy-example",
    "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server",
    "norarefy-source/simulation-differential-abundance/simulation-differential-abundance-server"
]

models = [ "gp", "log"]
distributions = [ "random", "skew"]
depths = [1000, 2000, 5000, 10000, 50000]
effect_sizes = [1, 1.15, 1.25, 1.5, 1.75, 2, 2.5, 3.5]
reps = 100
preprocs = ["nofilter", "filter"]
transforms = [ "none",
              "proportion",
              "subsample00", "subsample05", "subsample10", "subsample15",
                "subsample20", "subsample25", "subsample40",
              "rarefaction00", "rarefaction05", "rarefaction10", "rarefaction15",
                "rarefaction20", "rarefaction25", "rarefaction40",
              "deseq",
              "upperquartile", "TMM", "RLE" ]
distances = [ "bray",
            "euclidean",
            "poisson",
            "logFC", "bcv",
            "uunifrac",
            "wunifrac" ]
betas = [ "clusters", "adonis" ]

rule all_targets:
  input:
    "submission/manuscript.pdf",
    "submission/supplemental_text.pdf",
    "submission/response_to_reviewers.pdf",
    "submission/marked_up.pdf",

rule s1_download_archive:
  input:
    "workflow/scripts/s1_download_archive.sh"
  output:
    expand("{norarefy_slug}.Rmd", norarefy_slug = norarefy_slugs),
    expand("{norarefy_slug}.html", norarefy_slug = norarefy_slugs),
    "norarefy-source/norarefy-source.zip"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input}
    """

rule s1_make_rmd_patch:
  input:
    sh="workflow/scripts/s1_make_rmd_patch.sh",
    unmodified=lambda wildcards: [s for s in norarefy_slugs if wildcards.norarefy_slug in s],
    modified="patches/{norarefy_slug}.Rmd",
  output:
    patch="patches/{norarefy_slug}.Rmd.patch"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    echo "unmodified: {input.unmodified}"
    echo {input.sh} {input.unmodified} {input.modified} {output.patch}
    {input.sh} {input.unmodified} {input.modified} {output.patch}
    """
  
rule s1_patch_rmd:
  input:
    sh="workflow/scripts/s1_apply_rmd_patch.sh",
    unpatched="{norarefy_slug}.Rmd",
    patch=lambda wildcards: re.sub(".*/", "patches/", f"{wildcards.norarefy_slug}.Rmd.patch")
  output:
    "{norarefy_slug}.patched.Rmd"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.sh} {input.unpatched} {output} {input.patch}
    """

rule s1_render_rmd:
  input:
    R="workflow/scripts/s1_render_rmd.R",
    Rmd="{norarefy_slug}.patched.Rmd",
  output:
    "{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  resources:
    mem_mb=47000
  shell:
    """
    echo {wildcards.norarefy_slug}
    {input.R} {input.Rmd} {output}
    """

rule s1_compare_html:
  input:
    sh="workflow/scripts/s1_compare_html.sh",
    pm="{norarefy_slug}.html",
    pds="{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  output:
    compare="{norarefy_slug}.compare.txt"
  shell:
    """
    {input.sh} {input.pm} {input.pds}
    """


##############################################################################
#
# simulations
#
##############################################################################

rule generate_gp:
  input:
    R="workflow/scripts/generate_gp.R"
  output:
    "data/gp/{distribution}/{frac}_{depth}.nofilter.RDS"
  group:
    "generate"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
      {input.R} {wildcards.frac} {wildcards.depth} {wildcards.distribution} {reps}
    """

rule generate_log:
  input:
    R="workflow/scripts/generate_log.R"
  output:
    "data/log/{distribution}/{frac}_{depth}.nofilter.RDS"
  group:
    "generate"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {wildcards.frac} {wildcards.depth} {wildcards.distribution} {reps}
    """

rule sim_filter_data:
  input:
    R="workflow/scripts/filter_data.R",
    rds="{slug}.nofilter.RDS"
  output:
    "{slug}.filter.RDS"
  group:
    "filter"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} {output}
    """

rule sim_transform_none:
  input:
    rds="{slug}.RDS"
  output:
    rds="{slug}.none.RDS"
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    cp {input.rds} {output.rds}
    """

rule sim_transform_proportions:
  input:
    R="workflow/scripts/transform_proportions.R",
    rds="{slug}.RDS"
  output:
    "{slug}.proportion.RDS"
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} 
    """

rule sim_transform_subsample:
  input:
    R="workflow/scripts/transform_subsample.R",
    rds="{slug}.RDS"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "{slug}.subsample{fraction}.RDS"
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 1
    """

rule sim_transform_rarefy:
  input:
    R="workflow/scripts/transform_subsample.R",
    rds="{slug}.RDS"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "{slug}.rarefaction{fraction}.RDS"
  resources:
    mem_mb=16000
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 100
    """

rule sim_transform_deseq:
  input:
    R="workflow/scripts/transform_deseq.R",
    rds="{slug}.RDS"
  output:
    "{slug}.deseq.RDS"
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
   {input.R} {input.rds}
    """

rule sim_transform_edger:
  input:
    R="workflow/scripts/transform_edgeR.R",
    rds="{slug}.RDS"
  output:
    "{slug}.{edger_method}.RDS"
  wildcard_constraints:
    edger_method="upperquartile|TMM|RLE"
  group:
    "transform"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} {wildcards.edger_method}
    """

rule sim_distance_traditional:
  input:
    R="workflow/scripts/distance_traditional.R",
    rds="{slug}.RDS"
  output:
    "{slug}.{distance}.RDS"
  wildcard_constraints:
    distance="bray|euclidean|uunifrac|wunifrac",
  resources:
    mem_mb=20000
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule sim_distance_poisson:
  input:
    R="workflow/scripts/distance_poisson.R",
    rds="{slug}.RDS"
  output:
    "{slug}.poisson.RDS"
  resources:
    mem_mb=20000
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds}
    """

rule sim_distance_edger:
  input:
    R="workflow/scripts/distance_edger.R",
    rds="{slug}.RDS"
  output:
    "{slug}.{distance}.RDS"
  wildcard_constraints:
    distance="logFC|bcv",
  resources:
    mem_mb=12000
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule sim_cluster_distances:
  input:
    R="workflow/scripts/cluster_distances.R",
    rds="{slug}.RDS"
  output:
    "{slug}.clusters.tsv"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds}
    """

rule sim_adonis_distances:
  input:
    R="workflow/scripts/adonis_distances.R",
    rds="{slug}.RDS"
  output:
    "{slug}.adonis.tsv"
  conda:
    "envs/nr-modern.yml"
  shell:
    """
    {input.R} {input.rds}
    """

rule get_deseq_negative_values:
  input:
    R="workflow/scripts/get_deseq_negative_values.R",
    sim=expand("data/{model}/{distribution}/{frac}_{depth}.{preproc}.deseq.RDS",
                model = models, distribution = distributions,
                frac = effect_sizes, depth = depths,
                preproc = preprocs),
  conda:
    "envs/nr-s1.yml"
  output:
    "data/deseq_negative_values.tsv.gz"
  shell:
    """
    {input.R}
    """

rule template_overlap_analysis:
  input:
    R="workflow/scripts/template_overlap_analysis.R"
  conda:
    "envs/nr-s1.yml"
  resources:
    mem_mb=8000
  output:
    "data/rarefy_ocean_feces.tsv.gz"
  shell:
    """
    {input.R}
    """

rule simulated_nseqs_distros:
  input:
    R="workflow/scripts/get_simulated_nseqs_distros.R",
  conda:
    "envs/nr-s1.yml"
  output:
    "data/simulated_nseqs_distros.tsv"
  shell:
    """
    {input.R}
    """

##############################################################################
#
# pool data files
#
##############################################################################

rule sim_alpha:
  input:
    R="workflow/scripts/alpha.R",
    rds="{slug}.RDS"
  output:
    "{slug}.alpha.tsv"
  resources:
    mem_mb=24000
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.R} {input.rds}
    """

rule sim_pool_betas:
  input:
    R="workflow/scripts/pool_pools.R",
    sim=expand("data/{model}/{distribution}/{frac}_{depth}.{preproc}.{transform}.{distance}.{suffix}.tsv",
               model = models, distribution = distributions,
               frac = effect_sizes, depth = depths, preproc = preprocs,
               transform = transforms, distance = distances,
               allow_missing=True)
  output:
    "data/simulation_{suffix}.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  resources:
    mem_mb=12000
  shell:
    """
    {input.R} {output}
    """

rule sim_pool_alphas:
  input:
    R="workflow/scripts/pool_pools.R",
    sim=expand("data/{model}/{distribution}/{frac}_{depth}.{preproc}.{transform}.alpha.tsv",
               model = models, distribution = distributions,
               frac = effect_sizes, depth = depths,
               preproc = preprocs, transform = transforms)
  output:
    "data/simulation_alpha.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  shell:
    """
    {input.R} {output}
    """

##############################################################################
#
# plot data
#
##############################################################################

rule plot_deseq_negative_values:
  input:
    R="workflow/scripts/plot_deseq_negative_values.R",
    tsv="data/deseq_negative_values.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/deseq_negative_values.tiff"
  shell:
    """
    {input.R}
    """

rule plot_distribution_shape:
  input:
    R="workflow/scripts/plot_distribution_shape.R",
    tsv="data/simulated_nseqs_distros.tsv",
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/distribution_shape.tiff"
  shell:
    """
    {input.R}
    """

rule plot_s1_figure_3:
  input:
    "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server_pds.html"
  output:
    "results/figures/s1_figure_3.tiff"
  shell:
    """
    magick -density 300 -compress lzw norarefy-source/simulation-cluster-accuracy/Figure_3.pdf {output}
    """

rule plot_s1_figure_4:
  input:
    "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server_pds.html"
  output:
    "results/figures/s1_figure_4.tiff"
  shell:
    """
    magick -density 300 -compress lzw norarefy-source/simulation-cluster-accuracy/Figure_4.pdf {output}
    """

rule plot_my_figure_4:
  input:
    R="workflow/scripts/plot_my_figure_4.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/fig4_{cluster_method}_{transform}_{model}_{ds}.tiff",
  shell:
    """
    {input.R} {wildcards.model} {wildcards.cluster_method} {wildcards.transform} {wildcards.ds}
    """

rule plot_my_figure_5:
  input:
    R="workflow/scripts/plot_my_figure_5.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/fig5_{cluster_method}_{transform}_{model}.tiff"
  shell:
    """
    {input.R} {wildcards.model} {wildcards.cluster_method} {wildcards.transform}
    """

rule plot_compare_cluster_methods:
  input:
    R="workflow/scripts/plot_compare_cluster_methods.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/compare_cluster_methods.tiff"
  shell:
    """
    {input.R}
    """

rule plot_subsample_rarefaction_compare:
  input:
    R="workflow/scripts/plot_subsample_rarefaction_compare.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/subsample_rarefaction_compare.tiff"
  shell:
    """
    {input.R}
    """

rule plot_compare_filter_accuracy:
  input:
    R="workflow/scripts/plot_compare_filter_accuracy.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/compare_filter_accuracy.tiff"
  shell:
    """
    {input.R}
    """

rule plot_cluster_skew_compare:
  input:
    R="workflow/scripts/plot_cluster_skew_compare.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/cluster_skew_compare.tiff"
  shell:
    """
    {input.R}
    """

rule plot_adonis_skew_compare:
  input:
    R="workflow/scripts/plot_adonis_skew_compare.R",
    tsv="data/simulation_adonis.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/adonis_skew_compare.tiff"
  shell:
    """
    {input.R}
    """

rule plot_alpha_compare:
  input:
    R="workflow/scripts/plot_alpha_compare.R",
    tsv="data/simulation_alpha.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/alpha_compare_{model}.tiff"
  shell:
    """
    {input.R} {wildcards.model}
    """

################################################################################
#
# Submission related rules
#
################################################################################

figures_dict = {"01": "results/figures/subsample_rarefaction_compare.tiff",
                "02": "results/figures/compare_cluster_methods.tiff",
                "03": "results/figures/fig5_kmeans_rarefaction_gp.tiff",
                "04": "results/figures/fig4_kmeans_rarefaction00_gp_nds.tiff",
                "05": "results/figures/fig4_kmeans_rarefaction00_log_nds.tiff",
                "06": "results/figures/cluster_skew_compare.tiff",
                "07": "results/figures/adonis_skew_compare.tiff",
                "08": "results/figures/alpha_compare_gp.tiff",
                "S1": "results/figures/s1_figure_3.tiff",
                "S2": "results/figures/s1_figure_4.tiff",
                "S3": "results/figures/fig4_pam_subsample15_gp_ds.tiff",
                "S4": "results/figures/fig5_pam_subsample_gp.tiff",
                "S5": "results/figures/deseq_negative_values.tiff",
                "S6": "results/figures/distribution_shape.tiff",
                "S7": "results/figures/fig5_kmeans_rarefaction_log.tiff",
                "S8": "results/figures/compare_filter_accuracy.tiff",
                "S9": "results/figures/alpha_compare_log.tiff"
                }

rule generate_figs:
    input:
        tiff=lambda wildcards: figures_dict[wildcards.fig_num],
    output:
        tiff="submission/figure_{fig_num}.tiff"
    shell:
        """
        cp {input.tiff} {output.tiff}
        """

rule generate_figs_pngs:
    input:
        tiff=lambda wildcards: figures_dict[wildcards.fig_num],
    output:
        png="submission/figure_{fig_num}.png"
    shell:
        """
        convert {input.tiff} {output.png}
        """

rule write_paper:
  input:
    "workflow/scripts/render_rmd.R",
    "submission/manuscript.Rmd",
    "submission/references.bib",
    "submission/asm.csl",
    #
    "data/simulated_nseqs_distros.tsv",
    "data/simulation_clusters.tsv.gz",
    "data/simulation_adonis.tsv.gz",
    "data/simulation_alpha.tsv.gz",
    "data/rarefy_ocean_feces.tsv.gz",
    #
    expand("submission/figure_0{fig_number}.tiff", fig_number = list(range(1,9))),
    #
  output:
    "submission/manuscript.docx",
    "submission/manuscript.pdf",
    "submission/manuscript.md",
    "submission/manuscript.tex"
  conda:
    "envs/nr-modern.yml"
  resources:
    mem_mb=12000
  shell: 
    """
    workflow/scripts/render_rmd.R submission/manuscript.Rmd
    mv submission/manuscript.knit.md submission/manuscript.md 
    rm -f submission/manuscript.log
    """

rule supplemental_text:
  input:
    "submission/supplemental_text.Rmd",
    expand("submission/figure_S{fig_number}.png", fig_number = list(range(1,10))),
    "submission/references.bib",
    "submission/asm.csl",
    "workflow/scripts/render_rmd.R"
  output:
    "submission/supplemental_text.pdf",
  conda:
    "envs/nr-modern.yml"
  shell: 
    """
    workflow/scripts/render_rmd.R submission/supplemental_text.Rmd
    mv submission/supplemental_text.knit.md submission/supplemental_text.md 
    rm -f submission/supplemental_text.log submission/supplemental_text.tex
    """

rule response_to_reviewers:
  input:
    rmd="submission/response_to_reviewers.Rmd",
    rscript="workflow/scripts/render_rmd.R"
  output:
    "submission/response_to_reviewers.pdf"
  conda:
    "envs/nr-modern.yml"
  shell:
    """
    {input.rscript} {input.rmd}
    rm -f submission/response_to_reviewers.knit.md
    """

rule track_changes:
  input:
    "submission/manuscript.tex"
  output:
    "submission/marked_up.pdf"
  conda:
    "envs/nr-modern.yml"
  shell:
    """
    git cat-file -p cb1e940:submission/manuscript.tex > submission/manuscript_old.tex
    latexdiff submission/manuscript_old.tex submission/manuscript.tex > submission/marked_up.tex
    R -e "tinytex::pdflatex('submission/marked_up.tex')"
    rm marked_up.log
    rm submission/marked_up.tex
    rm submission/manuscript_old.tex
    """