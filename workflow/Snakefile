import re

norarefy_slugs = [ 
    "norarefy-source/dispersion-survey/dispersion.Rmd",
    "norarefy-source/minimal-rarefy-example/minimal-rarefy-example.Rmd",
    "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server.Rmd",
    "norarefy-source/simulation-differential-abundance/simulation-differential-abundance-server.Rmd"
]

depths = [1000, 2000, 5000, 10000, 50000]
fracs = ["s1", 1, 1.15, 1.25, 1.5, 1.75, 2, 2.5, 3.5]
reps = range(1, 101)
preprocs = ["nofilter", "filter"]
transforms = ["deseq",
              "none",
              "proportion",
              "subsample00", "subsample15",
              "rarefaction00", "rarefaction15",
              "upperquartile", "TMM", "RLE"]
distances = ["bray",
             "euclidean",
             "poisson",
             "logFC", "bcv",
             "uunifrac",
             "wunifrac"]

rule all_targets:
  input:
    # "norarefy-source/dispersion-survey/dispersion.compare.txt",
    # "norarefy-source/minimal-rarefy-example/minimal-rarefy-example.compare.txt",
    # "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server.compare.txt",
    # "norarefy-source/simulation-differential-abundance/simulation-differential-abundance-server.compare.txt",
    #
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.RDS",
    #        frac = fracs, depth = depths, rep = reps, preproc = preprocs),
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.RDS",
    #        frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #        transform = transforms),
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.{distance}.RDS",
    #        frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.{distance}.clusters.tsv",
    #        frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.{distance}.adonis.tsv",
    #     frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #     transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.alpha.tsv",
    #     frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #     transform = transforms),
    #       
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.clusters.tsv",
    #        frac = fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.adonis.tsv",
    #        frac = fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
    #     frac = fracs, depth = depths, rep = reps, preproc = preprocs,
    #     transform = transforms),
    #
    "data/simulation_clusters.tsv",
    "data/simulation_adonis.tsv",
    "data/simulation_alpha.tsv",
    #
    # "submission/manuscript.pdf"


rule s1_download_archive:
  input:
    "workflow/scripts/s1_download_archive.sh"
  output:
    expand("{norarefy_slug}.Rmd", norarefy_slug = norarefy_slugs),
    expand("{norarefy_slug}.html", norarefy_slug = norarefy_slugs),
    "norarefy-source/norarefy-source.zip"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input}
    """

rule s1_make_rmd_patch:
  input:
    sh="workflow/scripts/s1_make_rmd_patch.sh",
    unmodified=lambda wildcards: [s for s in norarefy_slugs if wildcards.norarefy_slug in s],
    modified="patches/{norarefy_slug}.Rmd",
  output:
    patch="patches/{norarefy_slug}.Rmd.patch"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    echo "unmodified: {input.unmodified}"
    echo {input.sh} {input.unmodified} {input.modified} {output.patch}
    {input.sh} {input.unmodified} {input.modified} {output.patch}
    """
  
rule s1_patch_rmd:
  input:
    sh="workflow/scripts/s1_apply_rmd_patch.sh",
    unpatched="{norarefy_slug}.Rmd",
    patch=lambda wildcards: re.sub(".*/", "patches/", f"{wildcards.norarefy_slug}.Rmd.patch")
  output:
    "{norarefy_slug}.patched.Rmd"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.sh} {input.unpatched} {output} {input.patch}
    """

rule s1_render_rmd:
  input:
    R="workflow/scripts/s1_render_rmd.R",
    Rmd="{norarefy_slug}.patched.Rmd",
  output:
    "{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    echo {wildcards.norarefy_slug}
    {input.R} {input.Rmd} {output}
    """

rule s1_compare_html:
  input:
    sh="workflow/scripts/s1_compare_html.sh",
    pm="{norarefy_slug}.html",
    pds="{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  output:
    compare="{norarefy_slug}.compare.txt"
  shell:
    """
    {input.sh} {input.pm} {input.pds}
    """

ruleorder: simA_generate_skew > simA_generate_data

rule simA_generate_data:
  input:
    R="workflow/scripts/simA_generate_data.R"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.nofilter.RDS"
  group:
    "generate"
  shell:
    """
    {input.R} {wildcards.frac} {wildcards.depth} {wildcards.rep}
    """

rule simA_generate_skew:
  input:
    R="workflow/scripts/simA_generate_skew.R"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/s1_{depth}_{rep}.nofilter.RDS"
  group:
    "generate"
  shell:
    """
    {input.R} {wildcards.depth} {wildcards.rep}
    """

rule simA_filter_data:
  input:
    R="workflow/scripts/simA_filter_data.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.nofilter.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.filter.RDS"
  group:
    "filter"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_none:
  input:
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.none.RDS"
  group:
    "transform"
  shell:
    """
    cp {input.rds} {output.rds}
    """

rule simA_transform_proportions:
  input:
    R="workflow/scripts/simA_transform_proportions.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.proportion.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_subsample:
  input:
    R="workflow/scripts/simA_transform_subsample.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.subsample{fraction}.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 1
    """

rule simA_transform_rarefy:
  input:
    R="workflow/scripts/simA_transform_subsample.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.rarefaction{fraction}.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 100
    """

rule simA_transform_deseq:
  input:
    R="workflow/scripts/simA_transform_deseq.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.deseq.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_edger:
  input:
    R="workflow/scripts/simA_transform_edgeR.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{edger_method}.RDS"
  wildcard_constraints:
    edger_method="upperquartile|TMM|RLE"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} {wildcards.edger_method}
    """

rule simA_distance_traditional:
  input:
    R="workflow/scripts/simA_distance_traditional.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.RDS"
  wildcard_constraints:
    distance="bray|euclidean|uunifrac|wunifrac",
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule simA_distance_poisson:
  input:
    R="workflow/scripts/simA_distance_poisson.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.poisson.RDS"
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_distance_edger:
  input:
    R="workflow/scripts/simA_distance_edger.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.RDS"
  wildcard_constraints:
    distance="logFC|bcv",
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule simA_cluster_distances:
  input:
    R="workflow/scripts/simA_cluster_distances.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.clusters.tsv"
  group:
    "cluster"
  wildcard_constraints:
    rep="\d{1,3}"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_adonis_distances:
  input:
    R="workflow/scripts/simA_adonis_distances.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.RDS"
  conda:
    "envs/nr-modern.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{filter}.{transform}.{distance}.adonis.tsv"
  group:
    "adonis"
  wildcard_constraints:
    rep="\d{1,3}"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_alpha:
  input:
    R="workflow/scripts/simA_alpha.R",
    rds="data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.{preproc}.{transform}.alpha.tsv"
  group:
    "alpha"
  wildcard_constraints:
    rep="\d{1,3}"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_pool_reps:
  input:
    sh="workflow/scripts/simA_pool_reps.sh",
    tsv=expand("data/sim_a/{frac_depth}_{rep}.{suffix}.tsv",
               rep = reps, allow_missing=True)
  conda:
    "envs/nr-base.yml"
  output:
    "data/sim_a/{frac_depth}_pool.{suffix}.tsv"
  group:
    "pool_reps"
  shell:
    """
    {input.sh} {input.tsv} {output}
    """

rule simA_pool_betas:
  input:
    R="workflow/scripts/simA_pool_pools.R",
    tsv=expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.{suffix}.tsv",
               frac = fracs, depth = depths, preproc = preprocs,
               transform = transforms, distance = distances, allow_missing=True)
  conda:
    "envs/nr-modern.yml"
  output:
    "data/simulation_{suffix}.tsv"
  shell:
    """
    {input.R} {input.tsv} {output}
    """

rule simA_pool_alphas:
  input:
    R="workflow/scripts/simA_pool_pools.R",
    tsv=expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
               frac = fracs, depth = depths, preproc = preprocs,
               transform = transforms)
  conda:
    "envs/nr-modern.yml"
  output:
    "data/simulation_alpha.tsv"
  shell:
    """
    {input.R} {input.tsv} {output}
    """


rule write_paper:
  input:
    "workflow/scripts/render_manuscript.R",
    "submission/manuscript.Rmd",
    "submission/references.bib",
    "submission/asm.csl"
    #
  output:
    "submission/manuscript.pdf",
    "submission/manuscript.md",
    "submission/manuscript.tex"
  conda:
    "envs/nr-modern.yml"
  shell: 
    """
    workflow/scripts/render_manuscript.R
    """
    
