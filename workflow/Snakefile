import re

norarefy_slugs = [ 
    "norarefy-source/dispersion-survey/dispersion",
    "norarefy-source/minimal-rarefy-example/minimal-rarefy-example",
    "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server",
    "norarefy-source/simulation-differential-abundance/simulation-differential-abundance-server"
]

depths = [1000, 2000, 5000, 10000, 50000]
sim_a_fracs = ["s1", 1, 1.15, 1.25, 1.5, 1.75, 2, 2.5, 3.5]
sim_log_fracs = ["sl1", "l1", "l1.15", "l1.25", "l1.5", "l1.75", "l2", "l2.5", "l3.5"]
reps = range(1, 101)
preprocs = ["nofilter", "filter"]
transforms = ["deseq",
              "none",
              "proportion",
              "subsample00", "subsample05", "subsample10", "subsample15",
                "subsample20", "subsample25", "subsample40",
              "rarefaction00", "rarefaction05", "rarefaction10", "rarefaction15",
                "rarefaction20", "rarefaction25", "rarefaction40",
              "upperquartile", "TMM", "RLE"]
distances = ["bray",
             "euclidean",
             "poisson",
             "logFC", "bcv",
             "uunifrac",
             "wunifrac"]

rule all_targets:
  input:
    # "norarefy-source/dispersion-survey/dispersion_pds.html",
    # "norarefy-source/minimal-rarefy-example/minimal-rarefy-example_pds.html",
    # "norarefy-source/simulation-cluster-accuracy/simulation-cluster-accuracy-server_pds.html",
    # "norarefy-source/simulation-differential-abundance/simulation-differential-abundance-server_pds.html",
    #
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.clusters.tsv",
    #        frac = sim_a_fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.adonis.tsv",
    #        frac = sim_a_fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
    #     frac = sim_a_fracs, depth = depths, rep = reps, preproc = preprocs,
    #     transform = transforms),
    #       
    # expand("data/sim_log/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.clusters.tsv",
    #        frac = sim_log_fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_log/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.adonis.tsv",
    #        frac = sim_log_fracs, depth = depths, preproc = preprocs,
    #        transform = transforms, distance = distances),
    # expand("data/sim_log/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
    #     frac = sim_log_fracs, depth = depths, rep = reps, preproc = preprocs,
    #     transform = transforms),
    #
    # "data/simulation_clusters.tsv.gz",
    # "data/simulation_adonis.tsv.gz",
    # "data/simulation_alpha.tsv.gz",
    # "data/deseq_negative_values.tsv.gz"
    #
    "results/figures/deseq_negative_values.pdf"
    #
    # Snakefile too complex to run these...
    # Run within nr-modern
    # workflow/scripts/plot_distribution_shape.R
    # workflow/scripts/plot_my_figure_4.R a pam subsample15 deseq
    # workflow/scripts/plot_my_figure_4.R a kmeans rarefaction00 no_deseq
    # workflow/scripts/plot_my_figure_4.R log pam subsample15 no_deseq
    # workflow/scripts/plot_my_figure_4.R log kmeans rarefaction00 no_deseq
    # workflow/scripts/plot_my_figure_5.R a pam subsample 
    # workflow/scripts/plot_my_figure_5.R a kmeans rarefaction
    # workflow/scripts/plot_my_figure_5.R log pam subsample
    # workflow/scripts/plot_my_figure_5.R log kmeans rarefaction
    # workflow/scripts/plot_compare_cluster_methods.R 
    # workflow/scripts/plot_subsample_rarefaction_compare.R
    # workflow/scripts/plot_cluster_skew_compare_i.R
    #
    # "results/figures/pam_subsample_fig_5.pdf",
    # "results/figures/kmeans_rarefaction_fig_5.pdf",
    # "results/figures/pam_subsample15_fig_4.pdf",
    # "results/figures/kmeans_rarefaction00_fig_4.pdf",
    #
    # "submission/manuscript.pdf"


rule s1_download_archive:
  input:
    "workflow/scripts/s1_download_archive.sh"
  output:
    expand("{norarefy_slug}.Rmd", norarefy_slug = norarefy_slugs),
    expand("{norarefy_slug}.html", norarefy_slug = norarefy_slugs),
    "norarefy-source/norarefy-source.zip"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input}
    """

rule s1_make_rmd_patch:
  input:
    sh="workflow/scripts/s1_make_rmd_patch.sh",
    unmodified=lambda wildcards: [s for s in norarefy_slugs if wildcards.norarefy_slug in s],
    modified="patches/{norarefy_slug}.Rmd",
  output:
    patch="patches/{norarefy_slug}.Rmd.patch"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    echo "unmodified: {input.unmodified}"
    echo {input.sh} {input.unmodified} {input.modified} {output.patch}
    {input.sh} {input.unmodified} {input.modified} {output.patch}
    """
  
rule s1_patch_rmd:
  input:
    sh="workflow/scripts/s1_apply_rmd_patch.sh",
    unpatched="{norarefy_slug}.Rmd",
    patch=lambda wildcards: re.sub(".*/", "patches/", f"{wildcards.norarefy_slug}.Rmd.patch")
  output:
    "{norarefy_slug}.patched.Rmd"
  conda:
    "envs/nr-s1.yml"
  shell:
    """
    {input.sh} {input.unpatched} {output} {input.patch}
    """

rule s1_render_rmd:
  input:
    R="workflow/scripts/s1_render_rmd.R",
    Rmd="{norarefy_slug}.patched.Rmd",
  output:
    "{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  resources:
    mem_mb=47000
  shell:
    """
    echo {wildcards.norarefy_slug}
    {input.R} {input.Rmd} {output}
    """

rule s1_compare_html:
  input:
    sh="workflow/scripts/s1_compare_html.sh",
    pm="{norarefy_slug}.html",
    pds="{norarefy_slug}_pds.html"
  conda:
    "envs/nr-s1.yml"
  output:
    compare="{norarefy_slug}.compare.txt"
  shell:
    """
    {input.sh} {input.pm} {input.pds}
    """


ruleorder: simA_generate_skew > simA_generate_log > simA_generate_data

rule simA_generate_data:
  input:
    R="workflow/scripts/simA_generate_data.R"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/{frac}_{depth}_{rep}.nofilter.RDS"
  group:
    "generate"
  shell:
    """
    {input.R} {wildcards.frac} {wildcards.depth} {wildcards.rep}
    """

rule simA_generate_skew:
  input:
    R="workflow/scripts/simA_generate_skew.R"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_a/s1_{depth}_{rep}.nofilter.RDS"
  group:
    "generate"
  shell:
    """
    {input.R} {wildcards.depth} {wildcards.rep}
    """

rule simA_generate_log:
  input:
    R="workflow/scripts/simA_generate_log.R"
  conda:
    "envs/nr-s1.yml"
  output:
    "data/sim_log/{frac}_{depth}_{rep}.nofilter.RDS"
  group:
    "generate"
  wildcard_constraints:
    frac="s?l\\d\\.*\\d*"
  shell:
    """
    {input.R} {wildcards.frac} {wildcards.depth} {wildcards.rep}
    """

rule simA_filter_data:
  input:
    R="workflow/scripts/simA_filter_data.R",
    rds="{slug}.nofilter.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.filter.RDS"
  group:
    "filter"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_none:
  input:
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    rds="{slug}.none.RDS"
  group:
    "transform"
  shell:
    """
    cp {input.rds} {output.rds}
    """

rule simA_transform_proportions:
  input:
    R="workflow/scripts/simA_transform_proportions.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.proportion.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_subsample:
  input:
    R="workflow/scripts/simA_transform_subsample.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "{slug}.subsample{fraction}.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 1
    """

rule simA_transform_rarefy:
  input:
    R="workflow/scripts/simA_transform_subsample.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  wildcard_constraints:
    fraction="\d\d"
  output:
    "{slug}.rarefaction{fraction}.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} 0.{wildcards.fraction} 100
    """

rule simA_transform_deseq:
  input:
    R="workflow/scripts/simA_transform_deseq.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.deseq.RDS"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_transform_edger:
  input:
    R="workflow/scripts/simA_transform_edgeR.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.{edger_method}.RDS"
  wildcard_constraints:
    edger_method="upperquartile|TMM|RLE"
  group:
    "transform"
  shell:
    """
    {input.R} {input.rds} {wildcards.edger_method}
    """

rule simA_distance_traditional:
  input:
    R="workflow/scripts/simA_distance_traditional.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.{distance}.RDS"
  wildcard_constraints:
    distance="bray|euclidean|uunifrac|wunifrac",
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule simA_distance_poisson:
  input:
    R="workflow/scripts/simA_distance_poisson.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.poisson.RDS"
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_distance_edger:
  input:
    R="workflow/scripts/simA_distance_edger.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.{distance}.RDS"
  wildcard_constraints:
    distance="logFC|bcv",
  group:
    "distance"
  shell:
    """
    {input.R} {input.rds} {wildcards.distance}
    """

rule simA_cluster_distances:
  input:
    R="workflow/scripts/simA_cluster_distances.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.clusters.tsv"
  group:
    "cluster"
  wildcard_constraints:
    slug=".*_\d{1,3}\\..*"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_adonis_distances:
  input:
    R="workflow/scripts/simA_adonis_distances.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-modern.yml"
  output:
    "{slug}.adonis.tsv"
  group:
    "adonis"
  wildcard_constraints:
    slug=".*_\d{1,3}\\..*"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_alpha:
  input:
    R="workflow/scripts/simA_alpha.R",
    rds="{slug}.RDS"
  conda:
    "envs/nr-s1.yml"
  output:
    "{slug}.alpha.tsv"
  group:
    "alpha"
  wildcard_constraints:
    slug=".*_\d{1,3}\\..*"
  shell:
    """
    {input.R} {input.rds}
    """

rule simA_pool_reps:
  input:
    sh="workflow/scripts/simA_pool_reps.sh",
    tsv=expand("{path}/{frac_depth}_{rep}.{suffix}.tsv",
               rep = reps, allow_missing=True)
  conda:
    "envs/nr-base.yml"
  output:
    "{path}/{frac_depth}_pool.{suffix}.tsv"
  group:
    "pool_reps"
  shell:
    """
    {input.sh} {input.tsv} {output}
    """

rule simA_pool_betas:
  input:
    R="workflow/scripts/simA_pool_pools.R",
    sim_a=expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.{suffix}.tsv",
               frac = sim_a_fracs, depth = depths, preproc = preprocs,
               transform = transforms, distance = distances, allow_missing=True),
    sim_log=expand("data/sim_log/{frac}_{depth}_pool.{preproc}.{transform}.{distance}.{suffix}.tsv",
               frac = sim_log_fracs, depth = depths, preproc = preprocs,
               transform = transforms, distance = distances, allow_missing=True)
  conda:
    "envs/nr-modern.yml"
  output:
    "data/{sim}_{suffix}.tsv.gz"
  shell:
    """
    {input.R} {output}
    """

rule simA_pool_alphas:
  input:
    R="workflow/scripts/simA_pool_pools.R",
    sim_a=expand("data/sim_a/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
               frac = sim_a_fracs, depth = depths, preproc = preprocs,
               transform = transforms),
    sim_log=expand("data/sim_log/{frac}_{depth}_pool.{preproc}.{transform}.alpha.tsv",
               frac = sim_log_fracs, depth = depths, preproc = preprocs,
               transform = transforms)
  conda:
    "envs/nr-modern.yml"
  output:
    "data/{sim}_alpha.tsv.gz"
  shell:
    """
    {input.R} {output}
    """

rule get_deseq_negative_values:
  input:
    R="workflow/scripts/get_deseq_negative_values.R",
    sim_a=expand("data/sim_a/{frac}_{depth}_{rep}.{preproc}.deseq.RDS",
               frac = sim_a_fracs, depth = depths, rep = reps, preproc = preprocs),
    sim_log=expand("data/sim_log/{frac}_{depth}_{rep}.{preproc}.deseq.RDS",
               frac = sim_log_fracs, depth = depths, rep = reps, preproc = preprocs)
  conda:
    "envs/nr-s1.yml"
  output:
    "data/deseq_negative_values.tsv.gz"
  shell:
    """
    {input.R}
    """

rule plot_deseq_negative_values:
  input:
    R="workflow/scripts/plot_deseq_negative_values.R",
    tsv="data/deseq_negative_values.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/deseq_negative_values.pdf"
  shell:
    """
    {input.R}
    """


rule simulated_nseqs_distros:
  input:
    R="workflow/scripts/get_simulated_nseqs_distros.R",
  conda:
    "envs/nr-s1.yml"
  output:
    "data/simulated_nseqs_distros.tsv"
  shell:
    """
    {input.R}
    """

rule plot_distribution_shape:
  input:
    R="workflow/scripts/plot_distribution_shape.R",
    tsv="data/simulated_nseqs_distros.tsv",
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/distribution_shape.pdf"
  shell:
    """
    {input.R}
    """

rule plot_my_figure_4:
  input:
    R="workflow/scripts/plot_my_figure_4.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/{cluster_method}_{transform}_fig_5.pdf"
  shell:
    """
    {input.R} {wildcards.cluster_method} {wildcards.transform}
    """

rule plot_my_figure_5:
  input:
    R="workflow/scripts/plot_my_figure_5.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/{cluster_method}_{transform}_fig_5.pdf"
  shell:
    """
    {input.R} {wildcards.cluster_method} {wildcards.transform}
    """

rule plot_compare_cluster_methods:
  input:
    R="workflow/scripts/plot_compare_cluster_methods.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/compare_cluster_methods.pdf"
  shell:
    """
    {input.R}
    """

rule plot_subsample_rarefaction_compare:
  input:
    R="workflow/scripts/plot_subsample_rarefaction_compare.R",
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/subsample_rarefaction_compare.pdf"
  shell:
    """
    {input.R}
    """

rule plot_compare_filter_accuracy:
  input:
    R="workflow/scripts/plot_compare_filter_accuracy.R"
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/compare_filter_accuracy.pdf"
  shell:
    """
    {input.R}
    """

rule plot_cluster_skew_compare_i:
  input:
    R="workflow/scripts/plot_cluster_skew_compare_i.R"
    tsv="data/simulation_clusters.tsv.gz"
  conda:
    "envs/nr-modern.yml"
  output:
    "results/figures/cluster_skew_compare_i.pdf"
  shell:
    """
    {input.R}
    """
  


# rule figure_1:
#   input:
#     "results/figures/compare_cluster_methods.pdf"
#   output:
#     "subsmission/figure_1.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """

# rule figure_s1:
#   input:
#     "results/figures/globalpatterns_distribution.pdf"
#   output:
#     "submission/figure_s1.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """

# rule figure_s2:
#   input:
#     "norarefy-source/simulation-cluster-accuracy/Figure_3.pdf"
#   output:
#     "submission/figure_s2.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """

# rule figure_s3:
#   input:
#     "norarefy-source/simulation-cluster-accuracy/Figure_4.pdf"
#   output:
#     "submission/figure_s3.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """

# rule figure_s4:
#   input:
#     "results/figures/my_figure_4.pdf"
#   output:
#     "submission/figure_s4.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """
  
# rule figure_s5:
#   input:
#     "results/figures/my_figure_5.pdf"
#   output:
#     "submission/figure_s5.pdf"
#   shell:
#     """
#     cp {input} {output}
#     """



rule write_paper:
  input:
    "workflow/scripts/render_manuscript.R",
    "submission/manuscript.Rmd",
    "submission/references.bib",
    "submission/asm.csl",
    #
    "data/simulated_nseqs_distros.tsv",
    "data/simulation_clusters.tsv.gz",
    "data/simulation_adonis.tsv.gz",
    "data/simulation_alpha.tsv.gz",
    #
    # "submission/figure_1.pdf",
    # "submission/figure_2.pdf",
    # "submission/figure_3.pdf",
    # "submission/figure_s1.pdf",
    # "submission/figure_s2.pdf",
    # "submission/figure_s3.pdf",
  output:
    "submission/manuscript.pdf",
    "submission/manuscript.md",
    "submission/manuscript.tex"
  conda:
    "envs/nr-modern.yml"
  shell: 
    """
    workflow/scripts/render_manuscript.R
    """
